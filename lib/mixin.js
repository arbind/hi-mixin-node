// Generated by CoffeeScript 1.4.0
(function() {
  var Mixin, _base;

  (_base = Function.prototype).bind || (_base.bind = function(oThis) {
    var aArgs, fBound, fNOP, fToBind;
    aArgs = Array.prototype.slice.call(arguments, 1);
    fToBind = this;
    fNOP = function() {};
    fBound = function() {
      return fToBind.apply((oThis && this instanceof fNOP ? this : oThis), aArgs.concat(Array.prototype.slice.call(arguments)));
    };
    fNOP.prototype = this.prototype;
    fBound.prototype = new fNOP();
    return fBound;
  });

  Mixin = (function() {

    function Mixin() {}

    /*
      #   @@mixinTo
      #   Inject the class and instance (methods and attributes) of this mixin into the target klazz
    */


    Mixin.mixinTo = function(klazz, config) {
      if (config == null) {
        config = null;
      }
      this.extendClass(klazz, this.includedAddTheseToClass);
      this.extendInstance(klazz.prototype, this.includedAddTheseToInstance);
      this.extend(klazz, this.addTheseToClass);
      this.extend(klazz.prototype, this.addTheseToInstance);
      klazz.mixinConfig || (klazz.mixinConfig = {});
      if (config != null) {
        return this.extend(klazz.mixinConfig, config);
      }
    };

    /*
      #   @@include
      #   Allows a mixin to include other mixins
    */


    Mixin.include = function(OtherMixin) {
      this.includedAddTheseToClass || (this.includedAddTheseToClass = {});
      this.includedAddTheseToInstance || (this.includedAddTheseToInstance = {});
      if (OtherMixin.addTheseToClass != null) {
        this.extend(this.includedAddTheseToClass, OtherMixin.addTheseToClass);
      }
      if (OtherMixin.addTheseToInstance != null) {
        return this.extend(this.includedAddTheseToInstance, OtherMixin.addTheseToInstance);
      }
    };

    Mixin.extendClass = function(targetClass, mixin) {
      return this.extend(targetClass, mixin);
    };

    Mixin.extendInstance = function(targetPrototype, mixin) {
      return this.extend(targetPrototype, mixin, true);
    };

    Mixin.extend = function(target, mixin, bindToTarget) {
      var boundValue, key, value, _results;
      if (bindToTarget == null) {
        bindToTarget = false;
      }
      _results = [];
      for (key in mixin) {
        value = mixin[key];
        boundValue = bindToTarget && 'function' === typeof value ? value.bind(target) : value;
        _results.push(target[key] = boundValue);
      }
      return _results;
    };

    return Mixin;

  })();

  module.exports = Mixin;

}).call(this);
